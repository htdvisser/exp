package main

import (
	"text/template"

	"golang.org/x/tools/go/packages"
)

type Options struct {
	PackageName string
	Models      bool
	SettersTo   string
	SettersFrom string
	Pointers    string
	Values      string
}

type Field struct {
	Field    string
	Name     string
	Type     string
	NullType string
}

type Type struct {
	Name              string
	FullName          string
	Fields            []Field
	FieldMaskName     string
	FieldMaskFullName string
}

type Data struct {
	Options Options
	Package *packages.Package
	Types   []Type
	Imports []string
}

var fileTemplate = template.Must(template.New("").Parse(`
{{- $ := .Options -}}
// Code generated by sqlgen. DO NOT EDIT.

package {{ or $.PackageName .Package.Name }}

{{- with .Imports }}

import (
	{{- range . }}
	"{{ . }}"
	{{- end}}
)
{{- end }}

{{- range .Types }}
{{- if $.Models }}

// {{ .Name }} is the generated model for {{ .FullName }}.
type {{ .Name }} struct {
	{{- range .Fields }}
	{{ .Name }} {{ .Type }}
	{{- end}}
}
{{- end }}

{{- if $.SettersTo }}

// {{ $.SettersTo }} sets the selected fields to the {{ .FullName }}.
func (m *{{ .Name }}) {{ $.SettersTo }}(e *{{ .FullName }}, mask {{ .FieldMaskFullName }}) {
	{{- range .Fields }}
	if mask.{{ .Name }} {
		{{- if .NullType }}
		if m.{{ .Name }}.Valid {
			e.{{ .Name }} = &m.{{ .Name }}.{{ .NullType }}
		} else {
			e.{{ .Name }} = nil
		}
		{{- else }}
		e.{{ .Name }} = m.{{ .Name }}
		{{- end }}
	}
	{{- end }}
}
{{- end }}

{{- if $.SettersFrom }}

// {{ $.SettersFrom }} sets the selected fields from the {{ .FullName }}.
func (m *{{ .Name }}) {{ $.SettersFrom }}(e *{{ .FullName }}, mask {{ .FieldMaskFullName }}) {
	{{- range .Fields }}
	if mask.{{ .Name }} {
		{{- if .NullType }}
		m.{{ .Name }} = {{ .Type }}{}
		if e.{{ .Name }} != nil {
			m.{{ .Name }}.Valid = true
			m.{{ .Name }}.{{ .NullType }} = *e.{{ .Name }}
		}
		{{- else }}
		m.{{ .Name }} = e.{{ .Name }}
		{{- end }}
	}
	{{- end }}
}
{{- end }}

{{- if $.Pointers }}

// {{ $.Pointers }} returns pointers to the selected fields.
func (m *{{ .Name }}) {{ $.Pointers }}(fields {{ .FieldMaskFullName }}) []interface{} {
	pointers := make([]interface{}, 0, fields.Len())
	{{- range .Fields }}
	if fields.{{ .Name }} {
		pointers = append(pointers, &m.{{ .Name }})
	}
	{{- end }}
	return pointers
}
{{- end }}

{{- if $.Values }}

// {{ $.Values }} returns the values of the selected fields.
func (m *{{ .Name }}) {{ $.Values }}(fields {{ .FieldMaskFullName }}) []interface{} {
	values := make([]interface{}, 0, fields.Len())
	{{- range .Fields }}
	if fields.{{ .Name }} {
		values = append(values, m.{{ .Name }})
	}
	{{- end }}
	return values
}
{{- end }}
{{- end }}
`))
