package main

import (
	"text/template"

	"golang.org/x/tools/go/packages"
)

type Options struct {
	MethodName string
	Pointers   bool
}

type Field struct {
	Field string
	Name  string
}

type Type struct {
	Name   string
	Fields []Field
}

type Data struct {
	Options Options
	Package *packages.Package
	Types   []Type
}

var fileTemplate = template.Must(template.New("").Parse(`
{{- $ := .Options -}}
// Code generated by scangen. DO NOT EDIT.

package {{ .Package.Name }}

import "fmt"

{{- range .Types }}

func (e *{{ .Name }}) {{ $.MethodName }}(fields ...string) ([]interface{}, error) {
	values := make([]interface{}, len(fields))
	for i, field := range fields {
		switch field {
		{{- range .Fields }}
		case "{{ .Field }}":
			values[i] = {{ if $.Pointers }}&{{ end }}e.{{ .Name }}
		{{- end }}
		default:
			return nil, fmt.Errorf("no field %q in {{ .Name }}", field)
		}
	}
	return values, nil
}{{ end }}
`))
