package main

import (
	"text/template"

	"golang.org/x/tools/go/packages"
)

type Options struct {
	PackageName string
}

type Field struct {
	Field string
	Name  string
}

type Type struct {
	FullName string
	Name     string
	Fields   []Field
}

type Data struct {
	Options Options
	Package *packages.Package
	Types   []Type
}

var fileTemplate = template.Must(template.New("").Parse(`
{{- $ := .Options -}}
// Code generated by maskgen. DO NOT EDIT.

package {{ or $.PackageName .Package.Name }}

import "fmt"

{{- range .Types }}

// {{ .Name }}FieldMask masks the fields of {{ .Name }}.
type {{ .Name }}FieldMask struct {
	{{- range .Fields }}
	{{ .Name }} bool
	{{- end}}
}

func (m *{{ .Name }}FieldMask) set(selected bool, fields ...string) ( error) {
	for _, field := range fields {
		switch field {
		{{- range .Fields }}
		case "{{ .Field }}":
			m.{{ .Name }} = selected
		{{- end }}
		default:
			return fmt.Errorf("no field %q in {{ .Name }}", field)
		}
	}
	return nil
}

// Select selects the given fields in the field mask.
func (m *{{ .Name }}FieldMask) Select(fields ...string) ( error) {
	return m.set(true, fields...)
}

// Unselect unselects the given fields in the field mask.
func (m *{{ .Name }}FieldMask) Unselect(fields ...string) ( error) {
	return m.set(false, fields...)
}

// Len returns the number of selected fields.
func (m {{ .Name }}FieldMask) Len() int {
	var count int
	{{- range .Fields }}
	if m.{{ .Name }} {
		count++
	}
	{{- end }}
	return count
}

// Fields returns the selected fields.
func (m {{ .Name }}FieldMask) Fields() []string {
	fields := make([]string, 0, m.Len())
	{{- range .Fields }}
	if m.{{ .Name }} {
		fields = append(fields, "{{ .Field }}")
	}
	{{- end }}
	return fields
}

{{- end }}
`))
