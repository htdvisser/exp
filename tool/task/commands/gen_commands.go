package commands

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"text/template"

	"github.com/urfave/cli/v2"
)

func genCommands() *cli.Command {
	return &cli.Command{
		Name:  "gen",
		Usage: "Generate files",
		Subcommands: []*cli.Command{
			{
				Name:   "dependabot",
				Usage:  "Generate dependabot configuration",
				Action: genDependabot,
			},
			{
				Name:   "code-workspace",
				Usage:  "Generate Visual Studio Code workspace",
				Action: genCodeWorkspace,
			},
		},
	}
}

func genDependabot(ctx *cli.Context) error {
	goModules, err := moduleDirs()
	if err != nil {
		return err
	}
	type goModuleEntry struct {
		Module string
		Prefix string
	}
	var goModuleEntries []goModuleEntry
	for _, goModule := range goModules {
		e := goModuleEntry{Module: goModule, Prefix: modulePrefixOverrides[goModule]}
		if e.Prefix == "" {
			e.Prefix = e.Module
		}
		if len(e.Prefix) > 14 { // Max 15. Template adds a ":" after the prefix.
			return fmt.Errorf("Prefix %q for module %q is too long for Dependabot", e.Prefix, e.Module)
		}
		goModuleEntries = append(goModuleEntries, e)
	}
	tmpl, err := template.ParseFiles("tool/dependabot.yml.tmpl")
	if err != nil {
		return err
	}
	var buf bytes.Buffer
	buf.WriteString("# File generated by `task gen dependabot`. DO NOT EDIT.\n")
	err = tmpl.Execute(&buf, struct {
		GoModules []goModuleEntry
	}{
		GoModules: goModuleEntries,
	})
	if err != nil {
		return err
	}
	return ioutil.WriteFile(".github/dependabot.yml", buf.Bytes(), 0644)
}

func genCodeWorkspace(ctx *cli.Context) error {
	goModules, err := moduleDirs()
	if err != nil {
		return err
	}
	tmpl, err := template.ParseFiles("tool/code-workspace.json.tmpl")
	if err != nil {
		return err
	}
	var buf bytes.Buffer
	buf.WriteString("// File generated by `task gen code-workspace`. DO NOT EDIT.\n")
	err = tmpl.Execute(&buf, struct {
		GoModules []string
	}{
		GoModules: goModules,
	})
	if err != nil {
		return err
	}
	return ioutil.WriteFile("exp.code-workspace", buf.Bytes(), 0644)
}
